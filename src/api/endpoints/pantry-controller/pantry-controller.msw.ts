/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  PantryDTO
} from '../../model';


export const getGetPantryByUserIdResponseMock = (overrideResponse: Partial< PantryDTO > = {}): PantryDTO => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), user: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), email: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), ingredients: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), ...overrideResponse})

export const getUpdatePantryResponseMock = (overrideResponse: Partial< PantryDTO > = {}): PantryDTO => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), user: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), email: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), ingredients: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), ...overrideResponse})


export const getGetPantryByUserIdMockHandler = (overrideResponse?: PantryDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PantryDTO> | PantryDTO)) => {
  return http.get('*/pantry', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPantryByUserIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdatePantryMockHandler = (overrideResponse?: PantryDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PantryDTO> | PantryDTO)) => {
  return http.put('*/pantry', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdatePantryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPantryControllerMock = () => [
  getGetPantryByUserIdMockHandler(),
  getUpdatePantryMockHandler()
]

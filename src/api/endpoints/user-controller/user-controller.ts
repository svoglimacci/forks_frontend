/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  UserDTO
} from '../../model';

import { useCustomFetch } from '../../../utils/customFetch';




export const useCreateUserHook = () => {
        const createUser = useCustomFetch<UserDTO>();

        return useCallback((
    userDTO: UserDTO,
 signal?: AbortSignal
) => {
        return createUser(
          {url: `http://localhost:1291/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userDTO, signal
    },
          );
        }, [createUser])
      }
    


export const useCreateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>, TError,{data: UserDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>, TError,{data: UserDTO}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const createUser =  useCreateUserHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>, {data: UserDTO}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>>
    export type CreateUserMutationBody = UserDTO
    export type CreateUserMutationError = unknown

    export const useCreateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>, TError,{data: UserDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useCreateUserHook>>>,
        TError,
        {data: UserDTO},
        TContext
      > => {

      const mutationOptions = useCreateUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const useMyselfHook = () => {
        const myself = useCustomFetch<UserDTO>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return myself(
          {url: `http://localhost:1291/users/me`, method: 'GET', signal
    },
          );
        }, [myself])
      }
    

export const getMyselfQueryKey = () => {
    return [`http://localhost:1291/users/me`] as const;
    }

    
export const useMyselfQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMyselfQueryKey();

  const myself =  useMyselfHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>> = ({ signal }) => myself(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MyselfQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>>
export type MyselfQueryError = unknown


export function useMyself<TData = Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMyself<TData = Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMyself<TData = Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useMyself<TData = Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useMyselfHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useMyselfQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  UserDTO
} from '../../model';


export const getCreateUserResponseMock = (overrideResponse: Partial< UserDTO > = {}): UserDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), email: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getMyselfResponseMock = (overrideResponse: Partial< UserDTO > = {}): UserDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), email: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})


export const getCreateUserMockHandler = (overrideResponse?: UserDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserDTO> | UserDTO)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMyselfMockHandler = (overrideResponse?: UserDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserDTO> | UserDTO)) => {
  return http.get('*/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getMyselfResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUserControllerMock = () => [
  getCreateUserMockHandler(),
  getMyselfMockHandler()
]

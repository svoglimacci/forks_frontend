/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  DeleteIngredient200,
  GetAllIngredients200,
  IngredientDTO
} from '../../model';


export const getGetIngredientByIdResponseMock = (overrideResponse: Partial< IngredientDTO > = {}): IngredientDTO => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getUpdateIngredientResponseMock = (overrideResponse: Partial< IngredientDTO > = {}): IngredientDTO => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getDeleteIngredientResponseMock = (): DeleteIngredient200 => ({})

export const getGetAllIngredientsResponseMock = (): GetAllIngredients200 => ({})

export const getCreateIngredientResponseMock = (overrideResponse: Partial< IngredientDTO > = {}): IngredientDTO => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})


export const getGetIngredientByIdMockHandler = (overrideResponse?: IngredientDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<IngredientDTO> | IngredientDTO)) => {
  return http.get('*/ingredients/:ingredientId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetIngredientByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateIngredientMockHandler = (overrideResponse?: IngredientDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<IngredientDTO> | IngredientDTO)) => {
  return http.put('*/ingredients/:ingredientId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateIngredientResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteIngredientMockHandler = (overrideResponse?: DeleteIngredient200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteIngredient200> | DeleteIngredient200)) => {
  return http.delete('*/ingredients/:ingredientId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDeleteIngredientResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAllIngredientsMockHandler = (overrideResponse?: GetAllIngredients200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAllIngredients200> | GetAllIngredients200)) => {
  return http.get('*/ingredients', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllIngredientsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateIngredientMockHandler = (overrideResponse?: IngredientDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<IngredientDTO> | IngredientDTO)) => {
  return http.post('*/ingredients', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateIngredientResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getIngredientMock = () => [
  getGetIngredientByIdMockHandler(),
  getUpdateIngredientMockHandler(),
  getDeleteIngredientMockHandler(),
  getGetAllIngredientsMockHandler(),
  getCreateIngredientMockHandler()
]

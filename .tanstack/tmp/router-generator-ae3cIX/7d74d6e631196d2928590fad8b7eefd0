/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RecipesRouteRouteImport } from './routes/recipes/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RecipesIndexRouteImport } from './routes/recipes/index'
import { Route as RecipesRecipeIdRouteRouteImport } from './routes/recipes/$recipeId/route'
import { Route as RecipesRecipeIdIndexRouteImport } from './routes/recipes/$recipeId/index'

const RecipesRouteRoute = RecipesRouteRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIndexRoute = RecipesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RecipesRouteRoute,
} as any)
const RecipesRecipeIdRouteRoute = RecipesRecipeIdRouteRouteImport.update({
  id: '/$recipeId',
  path: '/$recipeId',
  getParentRoute: () => RecipesRouteRoute,
} as any)
const RecipesRecipeIdIndexRoute = RecipesRecipeIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RecipesRecipeIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/recipes': typeof RecipesRouteRouteWithChildren
  '/recipes/$recipeId': typeof RecipesRecipeIdRouteRouteWithChildren
  '/recipes/': typeof RecipesIndexRoute
  '/recipes/$recipeId/': typeof RecipesRecipeIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/recipes': typeof RecipesIndexRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/recipes': typeof RecipesRouteRouteWithChildren
  '/recipes/$recipeId': typeof RecipesRecipeIdRouteRouteWithChildren
  '/recipes/': typeof RecipesIndexRoute
  '/recipes/$recipeId/': typeof RecipesRecipeIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/recipes'
    | '/recipes/$recipeId'
    | '/recipes/'
    | '/recipes/$recipeId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/recipes' | '/recipes/$recipeId'
  id:
    | '__root__'
    | '/'
    | '/recipes'
    | '/recipes/$recipeId'
    | '/recipes/'
    | '/recipes/$recipeId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecipesRouteRoute: typeof RecipesRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/'
      fullPath: '/recipes/'
      preLoaderRoute: typeof RecipesIndexRouteImport
      parentRoute: typeof RecipesRouteRoute
    }
    '/recipes/$recipeId': {
      id: '/recipes/$recipeId'
      path: '/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof RecipesRecipeIdRouteRouteImport
      parentRoute: typeof RecipesRouteRoute
    }
    '/recipes/$recipeId/': {
      id: '/recipes/$recipeId/'
      path: '/'
      fullPath: '/recipes/$recipeId/'
      preLoaderRoute: typeof RecipesRecipeIdIndexRouteImport
      parentRoute: typeof RecipesRecipeIdRouteRoute
    }
  }
}

interface RecipesRecipeIdRouteRouteChildren {
  RecipesRecipeIdIndexRoute: typeof RecipesRecipeIdIndexRoute
}

const RecipesRecipeIdRouteRouteChildren: RecipesRecipeIdRouteRouteChildren = {
  RecipesRecipeIdIndexRoute: RecipesRecipeIdIndexRoute,
}

const RecipesRecipeIdRouteRouteWithChildren =
  RecipesRecipeIdRouteRoute._addFileChildren(RecipesRecipeIdRouteRouteChildren)

interface RecipesRouteRouteChildren {
  RecipesRecipeIdRouteRoute: typeof RecipesRecipeIdRouteRouteWithChildren
  RecipesIndexRoute: typeof RecipesIndexRoute
}

const RecipesRouteRouteChildren: RecipesRouteRouteChildren = {
  RecipesRecipeIdRouteRoute: RecipesRecipeIdRouteRouteWithChildren,
  RecipesIndexRoute: RecipesIndexRoute,
}

const RecipesRouteRouteWithChildren = RecipesRouteRoute._addFileChildren(
  RecipesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecipesRouteRoute: RecipesRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
